package cla.edg.project.jingou;

import cla.edg.pageflow.BasePageFlowDescriptionScript;
import cla.edg.pageflow.BasePageFlowScript;
import cla.edg.pageflow.PageFlowScript;

public class WxappServiceScript extends BasePageFlowDescriptionScript {

	private static final PageFlowScript SCRIPT = $("wxapp service").need_login().no_footprint()
		/** 首页及登录 */
		.request("home page")
			.comments("打开首页").has_footprint()
			.when("no mobile").comments("用户还没有手机号信息")
				.got_page("business logon")
					.comments("绑定用户(user)和商户(merchant)")
					.may_request("query wechat mobile")
					.may_request("login with mobile and vcode")
			.when("has mobile").comments("用户有手机号信息,该手机号对应的商家可以被识别.")
				.got_page("user dashboard")
					.comments("被识别的用户的控制中心页面")
					.may_request("start to change warehouse")
					.may_request("view orders history")
					.may_request("view orders need handled")
					.may_request("view finance info")
					.may_request("open stock in form")
					.may_request("open stock out form")
					.may_request("scan to weight")
		.request("query wechat mobile").with_string("wechat encrypted data").with_string("wechat iv")
			.comments("解密微信的敏感信息,获得手机号").no_login()
			.got_page("ajax response")
		.request("login with mobile and vcode").with_string("mobile").variable().with_string("verify code").variable()
			.comments("手动输入手机号和验证码登录").no_login()
			.got_page("user dashboard")
		.request("logout").no_login()
			.comments("退出登录").no_login()
			.got_page("business logon")
		/** 辅助功能 */
		.request("start to change warehouse").with_string("warehouse id")
			.comments("打开切换打包厂的列表页面")
			.query("merchant_warehouse").which("user").no_pagination().with_string("user id")
				.comments("查询用户名下的所有打包厂")
			.got_page("user warehouse list")
				.comments("用户名下的所有打包厂")
				.may_request("select warehouse for working").comments("选择切换打包厂/回收站")
		.request("select warehouse for working").with_string("warehouse id")
			.comments("选择切换打包厂/回收站")
			.got_page("user dashboard")
		.request("send login verify code").with_string("mobile").variable()
			.comments("发送手机登录验证码").no_login().no_footprint()
			.got_page("simple toast")
		.request("view profile")
			.comments("打开用户个人信息页面")
			.got_page("user profile")
				.comments("个人信息页面")
		/** 订单相关 */
		.request("view orders history").with_string("warehouse id").with_string("filter")
			.comments("查看当前用户的所有订单\n\t//如果用户没有warehouse, 查看所有的订单\n\t//如果用户有warehouse, 查看当前warehouse下的所有订单")
			.query("main_order").which("all by user and warehouse").pagination().with_string("user id").with_string("warehouse id")
				.comments("根据打包厂ID查询所有的订单")
				.rule_comments("这个查询的前提条件是用户有打包厂厂长的角色")
			.query("main_order").which("all by user").pagination().with_string("user id")
				.comments("根据用户ID查询所有的订单")
				.rule_comments("这个查询的前提条件是用户没有厂长的角色, 只可能是司机角色")
			.got_page("order list")
				.comments("订单/工作单的列表页").list_of("main_order")
				.may_request("view order detail")
		.request("view next page orders history").with_string("warehouse id").with_string("filter").with_string("last record id")
			.comments("查看当前用户的所有订单 翻页")
			.got_page("order list")
		.request("view order detail").with_string("order id")
			.comments("查看主订单详情")
			.got_page("main order detail")
			
		.request("view orders need handled").with_string("warehouse id")
			.comments("查看当前用户需要去处理,例如核实重量 的所有订单")
			.query("job_order").which("need handled").pagination().with_string("user id").with_string("warehouse id")
				.comments("查询需要被当前用户处理的订单")
				.rule_comments("用户有打包厂厂长的角色, 则需要根据warehouse id过滤")
				.rule_comments("用户只有司机的角色, 则不用warehouse id过滤")
			.got_page("need handled order list")
				.comments("订单/工作单的列表页").list_of("main_order_big")
				.may_request("job order detail")
		.request("view next page orders need handled").with_string("warehouse id").with_string("last record id")
			.comments("查看当前用户需要去处理,例如核实重量 的所有订单: 翻页")
			.got_page("need handled order list")
		.request("view finance info").with_string("warehouse id")
			.comments("查看财务信息")
			.got_page("simple popup")
		/** 入库 */
		.request("open stock in form").with_string("warehouse id")
			.comments("填写入库记录")
			.got_page("stock in form")
				.comments("入库记录表单")
				.may_request("preview stock in form")
		.request("preview stock in form").with_form("stock_in_application")
			.comments("填写入库记录")
			.got_page("stock in form")
				.comments("入库记录表单")
				.may_request("submit stock in form")
		.request("submit stock in form").with_string("form key")
			.comments("提交入库记录")
			.got_page("simple popup")
		/** 出库 */
		.request("open stock out form").with_string("warehouse id")
			.comments("填写出库记录")
			.got_page("stock out form")
				.comments("出库记录表单")
				.may_request("preview stock out form")
		.request("preview stock out form").with_form("stock_out_application")
			.comments("填写出库记录")
			.got_page("stock out form")
				.comments("出库记录表单")
				.may_request("submit stock in form")
		.request("submit stock out form").with_string("form key")
			.comments("提交出库记录")
			.got_page("simple popup")
		/** 扫码称重 */
		.request("scan to weight")
			.comments("打开扫码称重页面")
			.got_page("scale scanning")
				.comments("扫地磅的二维码")
				.may_request("scale scanned")
		.request("scale scanned").with_string("scale id").variable()
			.comments("提交地磅的二维码扫描结果")
			.query("job_order").which("need weigh for user").no_pagination().with_string("user id").with_string("scale id")
				.comments("当当前用户完成称重后, 找出他目前需要称重的所有的工作单")
				.rule_comments("工作单的买家必须是和地磅是一个merchant_warehouse")
				.rule_comments("当前用户有权去处理该工作单, 不要把别人的订单也拉出来")
				.rule_comments("工作单的状态必须是 待称毛重 或者 待称皮重")
			.when("has order need weigh").comments("有需要称重操作的订单")
				.got_page("order select")
					.comments("选择已有的订单,或者新建订单")
					.may_request("fill weight to order").comments("当用户选择了一个已有订单的时候")
					.may_request("create new order").comments("当用户选择 新建 操作时")
			.when("has no order need weigh").comments("没有任何需要称重的订单")
				.got_page("seller selection")
		
		.request("create new order").with_string("scale id").with_string("vehicle plate number")
			.comments("使用地磅的称重数据创建新订单")
			.got_page("start new order")
				.comments("选择货物的卖家")
				.may_request("query warehouse by mobile")
		.request("query warehouse by mobile").with_string("scale id").with_string("vehicle plate number").with_string("mobile").variable()
			.comments("用手机号过滤, 选择卖家")
			.got_page("seller warehouse selection")
				.comments("卖家选择页面")
				.may_request("fill seller warehouse to order")
				.may_request("new seller warehouse to order")
		
		.request("job order detail").with_string("order id").with_string("warehouse id")
			.comments("订单详情")
			.when("need gross weight").comments("工作单待确认毛重")
				.got_page("scan to weight job order")
			.when("need confirm gross weight").comments("工作单待确认毛重")
				.got_page("confirm gross weight")
					.comments("待称毛重页面")
					.may_request("confirm gross weight")
			.when("need unload").comments("工作单待确认卸货")
				.got_page("confirm unloading done")
					.comments("确认卸货完成页面")
					.may_request("confirm unloading")
					.may_request("cancel job order")
			.when("scan to weight job order").comments("工作单待称皮重")
				.got_page("scan to weight job order")
					.comments("指定了工作单的扫码称重页面")
					.may_request("scan to weight with order")
					.may_request("cancel job order")
			.when("need confirm tare weight").comments("工作单待确认皮重")
				.got_page("confirm tare weight")
					.comments("待称皮重页面")
					.may_request("confirm tare weight")
					.may_request("cancel job order")
			.when("need pricing").comments("工作单待确定价/核重")
				.got_page("pricing job order")
					.comments("定价页面. 司机和站长的页面不同, 一个是显示信息,一个是提交表单")
					.may_request("submit pricing")
					.may_request("refresh pricing")
					.may_request("cancel job order")
			.when("need confirm pricing").comments("工作单待确认定价结果")
				.got_page("confirm pricing")
					.comments("同意价格页面")
					.may_request("confirm pricing")
					.may_request("cancel job order")
			.when("job order finished").comments("工作单被取消,或者完成. 总之是完成了,不能再改了.")
				.got_page("job order detail view")
					.comments("工作单的详情只读页面")
		.request("new seller warehouse to order").with_string("scale id").with_string("vehicle plate number").with_string("mobile")
			.comments("用电话号码创建一个新的warehouse,并用称重信息创建订单.")
			.got_page_same_as_request("job order detail")
		.request("fill seller warehouse to order").with_form("select_seller_warehouse")
			.comments("选择一个warehouse,并用称重信息创建订单.")
			.got_page_same_as_request("job order detail")
		.request("cancel job order").with_string("order id")
			.comments("站长取消工作单.")
			.got_page("cancel job order form")
				.comments("取消订单需要填写一个原因")
		.request("submit cancel job order form").with_form("cancel job order")
			.comments("确认取消工作单")
			.got_page_same_as_request("job order detail")
		.request("refresh pricing").with_string("order id")
			.comments("刷新当前工作单的定价信息")
			.got_page_same_as_request("job order detail")
		.request("confirm gross weight").with_string("order id").with_string("scale id").with_float("weight").variable()
			.comments("确认称毛重的结果")
			.got_page_same_as_request("job order detail")
		.request("fill weight to order").with_string("scale id").with_string("vehicle plate number").with_string("order id")
			.comments("将所称重量填入一个指定的订单")
			.got_page_same_as_request("job order detail")
//		.request("go back to gross weigh").with_string("order id")
//			.comments("重新称毛重")
//			.got_page("weigh with order")
//				.comments("为指定的订单称重.")
//				.may_request("submit weight with order")
//		.request("go back to tare weigh").with_string("order id")
		.request("scan to weight with order").with_string("order id").with_string("weigh type")
			.comments("重新称重的结果")
			.got_page_same_as_request("job order detail")
		.request("submit weight with order").with_string("order id").with_string("weigh type").with_string("scale id").variable()
			.comments("提交称重结果")
			.got_page_same_as_request("job order detail")
		.request("confirm unloading").with_string("order id")
			.comments("确认完成卸货")
			.got_page_same_as_request("job order detail")
		
		.request("confirm tare weight").with_string("order id").with_string("scale id").with_float("weight").variable().with_string("mobile").variable()
			.comments("确认称皮重的结果")
			.got_page_same_as_request("job order detail")
		.request("submit pricing").with_form("job_order_pricing")
			.comments("提交核对后的结果")
			.got_page_same_as_request("job order detail")
		.request("confirm pricing").with_string("order id")
			.comments("确认价格结果")
			.got_page_same_as_request("job order detail")
		// TODO: 详情页上的各种request
		
		.query("merchant_warehouse").which("related to user").no_pagination().with_string("user id")
			.comments("查询和某个用户相关的所有的merchant_warehouse")
			.rule_comments("名下的merchant下的merchant_warehouse")
			.rule_comments("通过employee_assignment指定了工作岗位的merchant_warehouse")
			.rule_comments("通过merchant_warehouse_stakeholder指定了(共享)所有权的merchant_warehouse")
			;
		
//			

	@Override
	public PageFlowScript getScript() {
		return SCRIPT;
	}

}
